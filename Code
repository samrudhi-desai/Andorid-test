package com.example.myapplication;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.os.Build;
import android.os.Bundle;
 import java.util.Date;
 import android.app.Notification;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import android.os.Handler;

import androidx.core.content.ContextCompat;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MainActivity extends Activity {
    //    private final String DEVICE_NAME="MyBTBee";
    private final String DEVICE_ADDRESS="28:04:21:09:51:15";
    private final UUID PORT_UUID = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");//Serial Port Service ID
    private BluetoothDevice device;
    private BluetoothSocket socket;
    private OutputStream outputStream;
    private InputStream inputStream;
    Button startButton, sendButton,clearButton,stopButton;
    TextView textView, np;
    EditText editText;
    ImageView machne;
    ProgressBar po;
    boolean deviceConnected=false;
    Thread thread;
    byte buffer[];
    int bufferPosition;
    int percentageCal;
    boolean stopThread;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        startButton = (Button) findViewById(R.id.buttonStart);
        sendButton = (Button) findViewById(R.id.buttonSend);
        clearButton = (Button) findViewById(R.id.buttonClear);
        stopButton = (Button) findViewById(R.id.buttonStop);
        editText = (EditText) findViewById(R.id.editText);
        textView = (TextView) findViewById(R.id.textView);
          machne = (ImageView) findViewById(R.id.imageView2);0
          np = (TextView) findViewById(R.id.textp);
        po = (ProgressBar) findViewById(R.id.progress_bar);
        setUiEnabled(false);
        showNotification ("this is notification");
//mock();
    }
/*private void mock()
{
    int percentage = calculatepercentage(extractDigits("Weight is: 2100g"));
    Log.i("TAG", " per value; " +percentage );
    np.setText(String.valueOf(percentage));
    po.setProgress(percentage );
}*/
private static final CharSequence NOTIFICATION_CHANNEL_NAME="MY_APP_CHANNEL";
private void showNotification(String alert) {
    if (TextUtils.isEmpty(alert)) return;


    int notificationId = (int) ((new Date().getTime()) % Integer.MAX_VALUE);

    Notification.Builder builder = new Notification.Builder(this)
            .setSmallIcon(R.drawable.ic_notification)
            .setColor(ContextCompat.getColor(this, R.color.colorPrimary))
            .setContentTitle(getString(R.string.app_name))
            .setContentText(alert)
            .setStyle(new Notification.BigTextStyle().bigText(alert))
            .setPriority(Notification.PRIORITY_HIGH);

    NotificationManager nm = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);

    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
        int importance = NotificationManager.IMPORTANCE_HIGH;
        NotificationChannel notificationChannel = new NotificationChannel(getPackageName(), NOTIFICATION_CHANNEL_NAME, importance);
        assert nm != null;
        builder.setChannelId(getPackageName());
        nm.createNotificationChannel(notificationChannel);
    }

    assert nm != null;
    nm.notify(notificationId, builder.build());
}

    private int calculatepercentage(int weight)
{
    Log.i("TAG", "Check ; " +weight );
    return (int) ( (weight/(float)5000)*100);
}
    private Integer extractDigits(String s){
        Pattern p = Pattern.compile("-?\\d+");
        Matcher m = p.matcher(s);
        while (m.find()) {
            return Integer.valueOf(m.group());
        }
        return 0;
    }
    public void setUiEnabled(boolean bool)
    {
        startButton.setEnabled(!bool);
        sendButton.setEnabled(bool);
        stopButton.setEnabled(bool);
        textView.setEnabled(bool);

    }
    public boolean BTinit()
    {
        boolean found=false;
        BluetoothAdapter bluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
        if (bluetoothAdapter == null) {
            Toast.makeText(getApplicationContext(),"Device doesnt Support Bluetooth",Toast.LENGTH_SHORT).show();
        }
        if(!bluetoothAdapter.isEnabled())
        {
            Intent enableAdapter = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableAdapter, 0);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        Set<BluetoothDevice> bondedDevices = bluetoothAdapter.getBondedDevices();
        if(bondedDevices.isEmpty())
        {
            Toast.makeText(getApplicationContext(),"Please Pair the Device first",Toast.LENGTH_SHORT).show();
        }
        else
        {
            for (BluetoothDevice iterator : bondedDevices)
            {
                if(iterator.getAddress().equals(DEVICE_ADDRESS))
                {
                    device=iterator;
                    found=true;
                    break;
                }
            }
        }
        return found;
    }
    public boolean BTconnect()
    {
        boolean connected=true;
        try {
            socket = device.createRfcommSocketToServiceRecord(PORT_UUID);
            socket.connect();
        } catch (IOException e) {
            e.printStackTrace();
            connected=false;
        }
        if(connected)
        {
            try {
                outputStream=socket.getOutputStream();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                inputStream=socket.getInputStream();
            } catch (IOException e) {
                e.printStackTrace();
            }

        }


        return connected;
    }
    public void onClickStart(View view) {
        if(BTinit())
        {
            if(BTconnect())
            {
                setUiEnabled(true);
                deviceConnected=true;
                beginListenForData();
                textView.append("\nConnection Opened!\n");
            }

        }
    }
    void beginListenForData()
    {
        final Handler handler = new Handler();
        stopThread = false;
        buffer = new byte[1024];
        Thread thread  = new Thread(new Runnable()
        {
            public void run()
            {
                while(!Thread.currentThread().isInterrupted() && !stopThread)
                {
                    try
                    {
                        int byteCount = inputStream.available();
                        if(byteCount > 0)
                        {
                            byte[] rawBytes = new byte[byteCount];
                            inputStream.read(rawBytes);
                            final String string=new String(rawBytes,"UTF-8");
                            handler.post(new Runnable() {
                                public void run()
                                {
                                    Log.i("TAG", "Return value; " +string );
                                    textView.append(string);
                                       runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            int percentage = calculatepercentage(extractDigits(string));
                                            Log.i("TAG", " per value; " +percentage );
                                            np.setText(String.valueOf(percentage));
                                            po.setProgress(percentage );

                                        }
                                    });
                                }
                            });

                        }
                    }
                    catch (IOException ex)
                    {
                        stopThread = true;
                        ex.printStackTrace();
                    }
                }
            }
        });

        thread.start();
    }
    public void onClickSend(View view) {
        String string = editText.getText().toString();
        string.concat("\n");

        try {
            outputStream.write(string.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
        textView.append("\nSent Data:"+string+"\n");

    }
    public void onClickStop(View view) throws IOException {
        stopThread = true;
        outputStream.close();
        inputStream.close();
        socket.close();
        setUiEnabled(false);
        deviceConnected=false;
        textView.append("\nConnection Closed!\n");
    }
    public void onClickClear(View view) {
        textView.setText("");
    }


}
